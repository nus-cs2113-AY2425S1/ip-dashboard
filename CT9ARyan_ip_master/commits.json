{"authorDailyContributionsMap":{"CT9ARyan":[{"date":"2024-08-26","commitResults":[{"hash":"9236b18d9d6b99df5efaa1b4b2476cd7c5929142","isMergeCommit":false,"messageTitle":"Add Level-0 increment: Rename, Greet, Exit","messageBody":"","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":25,"deletions":10}}}]},{"date":"2024-08-28","commitResults":[{"hash":"10669b4a45d89d97995bd6258d0d410e3ce62d40","isMergeCommit":false,"messageTitle":"Add formatting method to print divider line","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":4}}},{"hash":"1b07d7b1ccc44a13009307c9bdc9916d75307bf9","isMergeCommit":false,"messageTitle":"Add Level-1 increment: Echo","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":24,"deletions":4}}}]},{"date":"2024-08-29","commitResults":[{"hash":"47fd1075193a6445212d1c25453064c552281255","isMergeCommit":false,"messageTitle":"Add Level-2 increment: Add, List","messageBody":"","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":2}}},{"hash":"5bc74d235b65ba67d5fd9307dd58a3621962a528","isMergeCommit":false,"messageTitle":"Add new Task class","messageBody":"","tags":["A-Classes"],"fileTypesAndContributionMap":{"java":{"insertions":29,"deletions":0}}}]},{"date":"2024-08-30","commitResults":[{"hash":"276e756f276b96753924976a53ad68fb6c0c586b","isMergeCommit":false,"messageTitle":"Add getter and setter for task name in Task class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":0}}},{"hash":"92b1094104334755d91e9bf31a7131e3d7353381","isMergeCommit":false,"messageTitle":"Add Level-3 increment: Mark as Done","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":38,"deletions":9}}},{"hash":"210a6b66d92c9dc68e2c469cb63da2312a7bbabb","isMergeCommit":false,"messageTitle":"Refine if-else block for \"mark\" and \"unmark\" commands","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":16,"deletions":21}}}]},{"date":"2024-08-31","commitResults":[{"hash":"667f82641d85c07b96c5306a28d14f8c6f6645c0","isMergeCommit":false,"messageTitle":"Add exception handling for invalid inputs for \"mark\" and \"unmark\" commands and fix some minor bugs","messageBody":"Change the to-be-compared string used from \"keyword\" to \"line\" for \"bye\" and \"list\" commands so that they will perform their corresponding actions only when the user enters these exact commands. This improves flexibility and allows the user to reuse these keywords in their other tasks/items for the list.\n","tags":["Level-3-final"],"fileTypesAndContributionMap":{"java":{"insertions":26,"deletions":23}}},{"hash":"b3fd061543aeff75eed9e72a816836119a82adba","isMergeCommit":false,"messageTitle":"Edit code to conform to java coding standards.","messageBody":"","tags":["A-CodingStandard"],"fileTypesAndContributionMap":{"java":{"insertions":23,"deletions":19}}}]},{"date":"2024-09-05","commitResults":[{"hash":"d6c782d6ba43b2551ccfcdf772d8095d3895fc48","isMergeCommit":false,"messageTitle":"Add Todo class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":0}}},{"hash":"cb8fe3f6e822899e4c8c60b0f9f96aa8806f0ad8","isMergeCommit":false,"messageTitle":"Add Deadline class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":0}}},{"hash":"7373ebbec5aa85ddcb0aedd37a5f7ad11bfd0cc3","isMergeCommit":false,"messageTitle":"Add Event class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":26,"deletions":0}}},{"hash":"7b58bfe052b75016fe75d36f4dd6b338206becfc","isMergeCommit":false,"messageTitle":"Modify Task class","messageBody":"Change access modifiers for attributes from private to protected so that subclasses inheriting from Task class can access these attributes. Add extra methods defined in the subclasses so that the subclasses can override them. This is useful when the subclass objects are being referenced/type-casted as a superclass object. By adding these extra methods in the superclass and overridding them in the subclass, it ensures that the overridden methods from the subclass will be invoked instead of the one in the superclass, otherwise the methods found only in the subclass can no longer be invoked, leading to an error.\n","fileTypesAndContributionMap":{"java":{"insertions":17,"deletions":6}}},{"hash":"a3690534fa93638b0b5175947983c93f44b91a52","isMergeCommit":false,"messageTitle":"Add Level-4 increment: Todo, Event, Deadline","messageBody":"Modify Atom.java to allow user to specify, store and track 3 types of tasks, namely todo, deadline and event. By specifying the type of task before adding it to the list, the list now displays more important info, like the type of task, the deadline of the task, the timeline of the event, etc. depending on the type of task. In order to achieve this, the contents of the printList() method are also changed. Constants are declared at the top and used whenever applicable so that they make sense, resulting in improved code readability, but most importantly it gets rid of any magic numbers.\n","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":66,"deletions":8}}}]},{"date":"2024-09-06","commitResults":[{"hash":"4ac626662460bf195983f95ebb88156ba1444412","isMergeCommit":false,"messageTitle":"Update and refactor code to improve code quality","messageBody":"Firstly, by adopting the rule of \"make the happy path prominent\", I managed to simplify some of the if blocks in the code by switching the order of the logic and adding guard clauses. This helped to remove the redundant else block, making the if block a lot neater and easier to read. Secondly, my initial iteration of the code encountered an issue of deep nesting, aka the arrowhead style code, and this was the biggest (visual) flaw in my code. By refactoring my code, I managed to extract the contents in the large if block into 2 separate methods. This resulted in a short, concise and neat code which is still easy to understand and read. Lastly, I also refactored the \"magic numbers\" as constants, declared at the top of the code. This gives meaning to these arbituary values that I used and helps other readers make sense of them when they read through my code. Next, I also added exception handling functionalities for both the \"deadline\" and \"event\" commands in the event that the user enters an incorrect command format. Lastly, I created a method to print out the default exception message.\n","tags":["A-CodeQuality"],"fileTypesAndContributionMap":{"java":{"insertions":77,"deletions":40}}},{"hash":"a3e9f31cfea955c7183743909cb558b994f600b4","isMergeCommit":false,"messageTitle":"Use TextUI testing to semi automate the testing process and check for potential regressions","messageBody":"Using the input/output redirection technique, the input.txt stores all the input that are to be fed to the program/source code, and the output will be stored in another txt file called \"ACTUAL.txt\". The latter is then compared with EXPECTED.txt - a file containing the expected output of the code, given the inputs defined in the input.txt file, and any difference in the files will be displayed in the terminal.\n\nInitially, even after following all the steps correctly and ensuring that the contents in both EXPECTED.txt and ACTUAL.txt LOOK exactly the same, the file compare (FC) command still showed a difference in the 2 files. To resolve this, I had to open these 2 files in my Notepad++ app and highlight all the contents of the file. Narrowing down my search to the lines where the errors were reported, this was when i realised that the difference was actually empty space characters, which cannot be seen by the naked eye. Following that, I went back to my code to make the necessary changes, and now the files are identical!\n\nIn summary, this exercise taught me how to semi automate the testing of textUIs using the I/O redirection technique. This tool/skill proved to be effective as it helps to check for potential bugs/regressions whenever we made changes to the code, and this makes the whole testing process easier, instead of having to manually write the test cases.\n","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":22,"deletions":0}}}]},{"date":"2024-09-07","commitResults":[{"hash":"9dd263e88d0c8872ecc0b025ab350f9aa89c343c","isMergeCommit":false,"messageTitle":"Minor bug fix in if else block for \"list\" command","messageBody":"The use of the return keyword in the if block exits the whole outer while loop, leading to the termination of the program when the list is empty (i.e when Task.getTaskCount() \u003d\u003d 0). Therefore, to rectify this, the else keyword is used instead when the list is empty.\n","tags":["Level-4-bugfix"],"fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":3}}},{"hash":"3f84675eb9b35352a2da3e2513810afe83ee7d1d","isMergeCommit":false,"messageTitle":"Update .gitignore","messageBody":"","fileTypesAndContributionMap":{"bat":{"insertions":0,"deletions":21}}}]},{"date":"2024-09-12","commitResults":[{"hash":"82696c9b03a824c80f3d4c1e48c4b060151161ed","isMergeCommit":false,"messageTitle":"Add custom exception class to handle empty task id for \"mark\" and \"unmark\" commands","messageBody":"","tags":["A-Exceptions"],"fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":0}}},{"hash":"aa684a4d4ee7c61666690fb72086288c0b8d30b7","isMergeCommit":false,"messageTitle":"Add custom exception class to handle invalid (out-of-bounds) indexing of the task list during \"mark\" or \"unmark\" operations","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":0}}},{"hash":"48cdd510a1c91f2b9ecec166b9f2f7a6c178798d","isMergeCommit":false,"messageTitle":"Add custom exception class to handle empty TODO task description","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":0}}},{"hash":"89d080d85529ed381232c9bdfc03dfd9258fd0f0","isMergeCommit":false,"messageTitle":"Add custom exception class to handle empty DEADLINE task description","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":0}}},{"hash":"059eeb67b18984bcd8df30da8405485cc71ec0b8","isMergeCommit":false,"messageTitle":"Add custom exception class to handle invalid formatting of the DEADLINE command","messageBody":"Some examples of invalid formatting include, using \"by\" instead of \"/by\" or not using the keyword \"by\".\n","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":0}}},{"hash":"dc7ede200c24e6582877b590ea5da69e813458c4","isMergeCommit":false,"messageTitle":"Add custom exception class to handle empty EVENT task description","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":0}}},{"hash":"6accb4dd936dd71f7df7e62a7be48dc8bcf452e3","isMergeCommit":false,"messageTitle":"Add custom exception class to handle invalid formatting of the EVENT command","messageBody":"The implementation of this is quite similar to that of DEADLINE. However, for the EVENT command, there are now 2 keywords to check for now (i.e \"/from\" and \u0027/to\") instead of just 1. Therefore, this exception class handles incorrect inputs such as \"from\" or \"to\" without the \"/\", and empty FROM or TO date/time inputs.\n","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":0}}}]},{"date":"2024-09-13","commitResults":[{"hash":"a637ca2fb7d63d01574b43436863dabbd655283c","isMergeCommit":false,"messageTitle":"Update Atom to handle errors like incorrect user inputs","messageBody":"Using all the custom exception classes defined earlier, Atom is now able to handle errors and exceptions like incorrect user inputs. For the exception handling, a \"try-catch\" block, together with the \"throw\" keyword is implemented for every command block in Atom, so that every command block can throw and catch the corresponding exception depending on the user input. Multiple catch blocks are used if the exception handler in the command block needs to catch and handle different types of exception.\n\nFurthermore, to improve on code readability, I refactored the code by extracting 3 different methods from the if-else command blocks in the main method, namely \"addTodoTask\", \"addDeadlineTask\", and \"addEventTask\". This makes the main part of the code easier to read, understand, manage and it also looks more visually pleasing. I also refactored the size of the task list from \"100\" to \"MAX_NUMBER_OF_TASKS\" so as to avoid using magic numbers.\n","fileTypesAndContributionMap":{"java":{"insertions":104,"deletions":51}}},{"hash":"77d90834e1c48192b9f9b2cffeb999f4248b28ca","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-5\u0027","messageBody":"","tags":["Level-5"],"fileTypesAndContributionMap":{}},{"hash":"931925f1399d28e93db0da2b32b43dd87dae8649","isMergeCommit":false,"messageTitle":"Organise classes into packages","messageBody":"Created 3 new packages.\n\n1. \"atom\" --\u003e main package/folder storing all the classes and packages related to Atom\n2. \"exception\" --\u003e stores all of Atom\u0027s custom exception classes\n3. \"task\" --\u003e stores all the task related classes (i.e Task, Todo, Deadline, Event)\n\nFollowing that, the package statment is included at the top of every source file. This was achieved easily thanks to the refactoring feature in the IDE. In addition, in the main Atom source code, all the classes residing in the other packages need to be imported so that they can be used in the main Atom source code. I also ensured that all these new additions conformed to the coding standards, like ensuring all the packages\u0027 name are in all lower case, and when importing all the classes used in a package, they have to be stated explicitly instead of using the * operator.\n","fileTypesAndContributionMap":{"java":{"insertions":36,"deletions":0}}},{"hash":"9fb11ec4bf753b512ac9402fc28f7575dabf78db","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-Packages\u0027","messageBody":"","tags":["A-Packages"],"fileTypesAndContributionMap":{}}]},{"date":"2024-09-18","commitResults":[{"hash":"2f78f9eee7a3ccaccc2215dd619fb3897eec4a6c","isMergeCommit":false,"messageTitle":"Update code to use ArrayList instead of Arrays.","messageBody":"","tags":["A-Collections"],"fileTypesAndContributionMap":{"java":{"insertions":15,"deletions":16}}},{"hash":"d57b4e348d2274554eb39efeb40645dacbfc7c21","isMergeCommit":false,"messageTitle":"Remove static variable \"taskCount\" and its methods in Task class","messageBody":"Since Atom is now using an ArrayList instead of an Array to store the Tasks, the built-in method .size() of the ArrayList class can be used to get the size/number of tasks in the list instead. This removes the need for an extra static variable and getter method to read and query the number of current tasks in the list. Doing so makes the code a lot neater, easier and more straightforward too.\n","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":7}}}]},{"date":"2024-09-19","commitResults":[{"hash":"013eb7cf9f1868790f2c50812858cc264c35deb0","isMergeCommit":false,"messageTitle":"Update printList() method","messageBody":"The if condition that checks whether the list is empty was initially written in the main() method. This if block was moved to the printList() method so that the code in the main() looks more concise. Furthermore, it makes more sense to put it in the printList() method as it should first perform a check to ensure that the list is not empty before actually printing the contents of the list.\n","fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":0}}},{"hash":"94e9202ef3172f87ecf744435132a7f5abf36f18","isMergeCommit":false,"messageTitle":"Update display format for DEADLINE and EVENT tasks after \"mark\" and \"unmark\" commands","messageBody":"Initially, after marking/unmarking a DEADLINE or EVENT task, the output will show the type of task and the name of the task, without any additional information. After the change, the output now not shows the type of task and the name of the task, it also shows the date and time the task has to be completed by for a DEADLINE task, or the timeline or duration of the event for an EVENT task.\n","fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":2}}},{"hash":"474b4abb5362270863160fa15ae35f50cb57e373","isMergeCommit":false,"messageTitle":"Add Level-6 increment: Delete","messageBody":"Atom is now able to delete tasks from the list that are no longer needed. A method deleteTask() is created to delete the specified task from the list and print a message to the user, showing the user the deleted task and the number of tasks remaining in the list. In the main() method, similar to the \"mark\" and \"unmark\" commands, all the exceptions like incorrect format and missing task id are handled properly and gracefully, with the appropriate error messages. In addition, as mentioned before, all instances of the static variable \"taskCount\" are now replaced with tasksList.size().\n","tags":["Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":48,"deletions":9}}}]},{"date":"2024-09-20","commitResults":[{"hash":"1c8191cde0b6dcf2b9458235b6c2486412825467","isMergeCommit":false,"messageTitle":"Import file and file exception classes","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":0}}},{"hash":"2e190ac739abda4c616835643ef5f9781dc3c1bb","isMergeCommit":false,"messageTitle":"Create new folder \"data\" and txt file \"AtomList\" in the \"data\" folder","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":21,"deletions":0}}},{"hash":"8dc9e4d466226ba501bb504520db8378f5b3dcde","isMergeCommit":false,"messageTitle":"Save list data by writing to AtomList.txt file.","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":27,"deletions":0}}},{"hash":"0447ebb7cd123f5320696a05d4c4fa9c8d80f49a","isMergeCommit":false,"messageTitle":"Load data from AtomList.txt file to the list when the program starts","messageBody":"","tags":["Level-7"],"fileTypesAndContributionMap":{"java":{"insertions":48,"deletions":3}}},{"hash":"32c37cdc6868c77585dd295df454091152072c4a","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-6\u0027","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"e4c6588c29ac337878ffd30754f3dce1be607abb","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-7\u0027","messageBody":"# Conflicts:\n#\tsrc/main/java/atom/Atom.java\n","fileTypesAndContributionMap":{}},{"hash":"af8945f865c0307f74f0be06a2cdacb77841a317","isMergeCommit":false,"messageTitle":"Edit methods for adding a TODO, DEADLINE and EVENT tasks","messageBody":"Initially, the adding of a TODO, DEADLINE and EVENT task creates and adds the specific task object, based on its type to the list, and prints out a \"task added\" message all in the same method. With the implementation of the Level-7 increment: Save, these methods need to be reused in order to add the task\u0027s data stored in the file to the list. However, as the tasks are added from the txt file to the list at the start of the program, all the corresponding task messages will also be printed at the start, flooding the console terminal with loads of \"task added\" messages, which are not required to be shown to the user. Therefore, I have further refactored the method, essentially separating it into 2 different parts. (i.e one with message and one without)\n\nCurrently, the addTask() method solely creates and adds the task object to the list, while the addTaskWithMessage() method prints out the \"task added\" message, on top of adding the task using the addTask() method.\n","tags":["Level-7-final"],"fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":15}}}]},{"date":"2024-10-03","commitResults":[{"hash":"27c9358f3d64ab1ce0e35ecb6235e382cad22ed8","isMergeCommit":false,"messageTitle":"Add new class \"TaskList\" to handle all task related operations","messageBody":"This class contatins:\n- task list\n- method to get the task list\n- method to get the task list size\n- methods to mark or unmark a certain task\n- methods to add different types of task to the list\n- method to delete a task from the list\n","fileTypesAndContributionMap":{"java":{"insertions":88,"deletions":0}}},{"hash":"f39341f9828e4a1a8f360fb52fd11ef9785b7bdf","isMergeCommit":false,"messageTitle":"Add new class \"Ui\" to handle all interactions with the user","messageBody":"This class handles the display format of the application, reads the inputs from the user, and prints the relevant messages/output for the user depending on the commands given.\n","fileTypesAndContributionMap":{"java":{"insertions":150,"deletions":0}}},{"hash":"d22bdf0dda8f2a2c03bafc0e7da913c4998b6709","isMergeCommit":false,"messageTitle":"Add new class \"Storage\" to handle transfer of saved data between AtomList.txt and the ArrayList in Atom","messageBody":"This class handles:\n- loading of saved data (if any) from the AtomList.txt file to the ArrayList in Atom\n- storing of data from the ArrayList in Atom to the AtomList.txt file upon exiting the program.\n","fileTypesAndContributionMap":{"java":{"insertions":140,"deletions":0}}},{"hash":"798cc973381b7cb322ad87a77fe49a2b6ad2b2d2","isMergeCommit":false,"messageTitle":"Add new class \"Parser\" to parse and make sense of the user input","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":27,"deletions":0}}},{"hash":"b3b8103e345ad96d9960bdcbdb8419bd7ad1e077","isMergeCommit":false,"messageTitle":"Add new abstract class \"Command\"","messageBody":"This class, which will be the superclass, defines the methods that need to be implemented by its subclasses (i.e the specific command classes)\n","fileTypesAndContributionMap":{"java":{"insertions":8,"deletions":0}}},{"hash":"f2661e4eb4529527394bd723a72088aabbcd198e","isMergeCommit":false,"messageTitle":"Add new class \"ExitCommand\" which inherits from Command class","messageBody":"This command is used to:\n- exit the program\n- store the saved data from the ArrayList to the AtomList.txt file\n","fileTypesAndContributionMap":{"java":{"insertions":17,"deletions":0}}},{"hash":"a0ec7da61bb9023613c7071b2c5e03875bbc5365","isMergeCommit":false,"messageTitle":"Add new class \"ListCommand\" which inherits from Command class","messageBody":"This command prints the contents of the ArrayList to the console terminal.\n","fileTypesAndContributionMap":{"java":{"insertions":14,"deletions":0}}},{"hash":"ea8260ccf262b875f6f023ab7282b83b41174f04","isMergeCommit":false,"messageTitle":"Add new class \"InvalidCommand\" which inherits from Command class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":13,"deletions":0}}},{"hash":"485e66b8ce24d81b3f099fe6f9f674659043a2c2","isMergeCommit":false,"messageTitle":"Add new class \"MarkCommand\" which inherits from Command class","messageBody":"This command is used to:\n- mark a task as done\n- mark a task as undone\n","fileTypesAndContributionMap":{"java":{"insertions":50,"deletions":0}}},{"hash":"6f60e94a458effd778b0ee5af67333a2174eafc6","isMergeCommit":false,"messageTitle":"Add new class \"AddCommand\" which inherits from Command class","messageBody":"This command can:\n- add a Todo task\n- add a Deadline task\n- add a Event task\n","fileTypesAndContributionMap":{"java":{"insertions":122,"deletions":0}}},{"hash":"f0bd70e829bf71d436fac6d3b091551cb856adba","isMergeCommit":false,"messageTitle":"Add new class \"DeleteCommand\" which inherits from Command class","messageBody":"This command is used to:\n- delete a task from the list, given the task id\n","fileTypesAndContributionMap":{"java":{"insertions":43,"deletions":0}}},{"hash":"0c97804bd8313c76cc5fa90b0e0dbd1e4cbea673","isMergeCommit":false,"messageTitle":"Add new exception class specific to Atom \"AtomException\"","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":0}}},{"hash":"0d324dfa068c9f3e46c684ed11fe87775c6f2a42","isMergeCommit":false,"messageTitle":"Refactor variable names to improve code quality","messageBody":"For deadline related tasks:\nString by -\u003e String dueDate\n\nFor event related tasks:\nString from -\u003e String startDate\nString to -\u003e String endDate\n\nThis simple yet effective change makes the code easier to understand and read. Lastly, the \"Task class\" is updated to be an abstract class.\n","fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":19}}},{"hash":"f4c037e359bf064983f6cef196001c72f665c5e8","isMergeCommit":false,"messageTitle":"Update all exception classes to store the corresponding error messages","messageBody":"These error messages are stored in an overridden method called \"getMessage()\". This makes the retrieval of the error messages easier (using e.getMessage() )\n","fileTypesAndContributionMap":{"java":{"insertions":59,"deletions":0}}},{"hash":"350d9f1a1b0fd5ca6e7a55f5fce2ea72a22b9d24","isMergeCommit":false,"messageTitle":"Refactor code to make it more OOP","messageBody":"","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":427}}},{"hash":"52d9429cdd3f41d60d0357aeebe87293388e9f24","isMergeCommit":false,"messageTitle":"Organise related classes in their respective packages and update all import statements","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":52,"deletions":12}}}]},{"date":"2024-10-07","commitResults":[{"hash":"7c6c877200bc3657fc7e2f8d9c946739f581a5c1","isMergeCommit":false,"messageTitle":"Add new class \"FindCommand\" which inherits from Command class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":17,"deletions":0}}},{"hash":"b413f00d5a12d092425703b2ce6a6d2559902aac","isMergeCommit":false,"messageTitle":"Update \"Parser\" class to handle the \"FindCommand\" case","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":1}}},{"hash":"32d5f767485c480d336e6e047fb6cf67ba3fd443","isMergeCommit":false,"messageTitle":"Add new method in \"TaskList\" class to find matching tasks containing the keyword in the list","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":15,"deletions":0}}},{"hash":"b1fecbe6b923a768e573e501dfd8c4b28953de7b","isMergeCommit":false,"messageTitle":"Refactor \"printList\" method and add new method to print list of matching tasks found","messageBody":"The \"printList\" method was refactored by extracting part of it to become another method. Initially, the \"printList\" method contains the code for printing out messages to the terminal and the for loop that iterates through the list and prints out all the tasks in the list. After refactoring, the latter part was extracted to another method, named \"printTasksInList\". This not only makes the \"printList\" method simpler and easier to read, but also improves reusability. In fact, the newly added method, which prints out another list containing the matching tasks found based on the \"find \" command, uses the newly extracted method.\n","fileTypesAndContributionMap":{"java":{"insertions":24,"deletions":9}}},{"hash":"c41a7f590931cb4a93cadc8c5da4846b0bdf3022","isMergeCommit":false,"messageTitle":"Update methods in \"FindCommand\" class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":26,"deletions":0}}},{"hash":"f927426a4e5f6da23b68feab9f55581a0aa25c47","isMergeCommit":false,"messageTitle":"Add new custom exception class to handle missing keyword for \"find\" command","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":0}}},{"hash":"6e185e42c88bc8879534dd3cba0f2813e715ced2","isMergeCommit":false,"messageTitle":"Change access modifiers for constants from PUBLIC to PRIVATE","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":6,"deletions":6}}},{"hash":"f2cc0a70060439edef74ddfad3f3834aad6774a5","isMergeCommit":true,"messageTitle":"Merge pull request #1 from CT9ARyan/branch-Level-9","messageBody":"Level-9 Increment: Find","tags":["Level-9"],"fileTypesAndContributionMap":{}}]}]},"authorFileTypeContributionMap":{"CT9ARyan":{"java":1045,"md":0,"fxml":0,"sh":0,"bat":0,"gradle":0,"txt":22}},"authorContributionVariance":{"CT9ARyan":32443.842},"authorDisplayNameMap":{"CT9ARyan":"CS2113-T11-3 FONG..RYAN"}}
